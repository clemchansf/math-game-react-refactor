{"version":3,"sources":["App.js","index.js"],"names":["ProgressBar","props","className","style","transform","score","App","useState","setScore","mistakesAllowed","setMistakesAllowed","generateGame","currentProblem","setCurrentProblem","userAnswer","setUserAnswer","showError","setShowError","answerField","useRef","resetButton","generateNumber","max","Math","floor","random","firstNumber","secondNumber","operator","useEffect","setTimeout","current","focus","onSubmit","e","correctAnswer","preventDefault","parseInt","prev","action","ref","value","onChange","target","type","autoComplete","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAiGA,SAASA,EAAYC,GACnB,OACE,sBAAKC,UAAU,WAAf,UACE,sBAAKA,UAAU,QAAf,UACE,qBAAKA,UAAU,QACf,qBAAKA,UAAU,QACf,qBAAKA,UAAU,QACf,qBAAKA,UAAU,QACf,qBAAKA,UAAU,QACf,qBAAKA,UAAU,QACf,qBAAKA,UAAU,QACf,qBAAKA,UAAU,QACf,qBAAKA,UAAU,QACf,qBAAKA,UAAU,WAGjB,qBAAKA,UAAU,iBAAiBC,MAAO,CAAEC,UAAU,UAAD,OAAYH,EAAMI,MAAQ,GAA1B,WAKzCC,MAnHf,WAAgB,IAAD,EACaC,mBAAS,GADtB,mBACNF,EADM,KACCG,EADD,OAEiCD,mBAAS,GAF1C,mBAENE,EAFM,KAEWC,EAFX,OAG+BH,mBAASI,GAHxC,mBAGNC,EAHM,KAGUC,EAHV,OAIuBN,mBAAS,IAJhC,mBAINO,EAJM,KAIMC,EAJN,OAKqBR,oBAAS,GAL9B,mBAKNS,EALM,KAKKC,EALL,KAMPC,EAAcC,iBAAO,MACrBC,EAAcD,iBAAO,MAY3B,SAASE,EAAeC,GACtB,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAM,IAG3C,SAASX,IACP,MAAO,CACLe,YAAaL,EAAe,IAC5BM,aAAcN,EAAe,IAC7BO,SAAU,CAAC,IAAK,IAAK,KAAKP,EAAe,KAiC7C,OAhDAQ,qBAAU,WACM,KAAVxB,GAAoC,IAApBI,GAElBqB,YAAW,kBAAMV,EAAYW,QAAQC,UAAS,OAE/C,CAAC3B,EAAOI,IA4CT,qCACE,sBAAKP,UAAW,WAAkC,IAApBO,GAAmC,KAAVJ,EAAgB,WAAa,IAApF,UACE,oBAAGH,UAAW,QAAUc,EAAY,iBAAmB,IAAvD,UAA6DJ,EAAec,YAA5E,IAA0Fd,EAAegB,SAAzG,IAAoHhB,EAAee,gBAMnI,uBAAMM,SAtCZ,SAAsBC,GAKpB,IAAIC,EAJJD,EAAEE,iBAEFlB,EAAYa,QAAQC,QAGY,MAA5BpB,EAAegB,WAAkBO,EAAgBvB,EAAec,YAAcd,EAAee,cACjE,MAA5Bf,EAAegB,WAAkBO,EAAgBvB,EAAec,YAAcd,EAAee,cACjE,MAA5Bf,EAAegB,WAAkBO,EAAgBvB,EAAec,YAAcd,EAAee,cAE7FU,SAASvB,KAAgBqB,EAC3B3B,GAAS,SAAA8B,GAAI,OAAIA,EAAO,MAExB5B,GAAmB,SAAA4B,GAAI,OAAIA,EAAO,KAClCrB,GAAa,GACba,YAAW,kBAAMb,GAAa,KAAQ,MAExCJ,EAAkBF,KAClBI,EAAc,KAoBoBwB,OAAO,GAAGrC,UAAU,YAAlD,UAKE,uBAAOsC,IAAKtB,EAAauB,MAAO3B,EAAY4B,SAAU,SAAAR,GAAC,OAAInB,EAAcmB,EAAES,OAAOF,QAAQG,KAAK,OAAO1C,UAAU,aAAa2C,aAAa,QAC1I,+CAGF,oBAAG3C,UAAU,OAAb,uBAA+B,GAAKG,EAApC,6CAAsF,EAAII,EAAmB,EAAI,EAAIA,EAAkB,EAAvI,qBAGA,cAACT,EAAD,CAAaK,MAAOA,OAGtB,qBAAKH,UAAW,WAAiC,IAApBO,GAAmC,KAAVJ,EAAe,oBAAsB,IAA3F,SACE,sBAAKH,UAAU,gBAAf,UACE,mBAAGA,UAAU,cAAb,SAAsC,KAAVG,EAAe,qBAAuB,qBAClE,wBAAQmC,IAAKpB,EAAa0B,QAnClC,WACEtC,EAAS,GACTE,EAAmB,GACnBK,EAAc,IACdF,EAAkBF,KAClBO,EAAYa,QAAQC,SA8BgC9B,UAAU,eAAxD,iCCrFV6C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.9041a274.chunk.js","sourcesContent":["import { useState, useRef, useEffect } from 'react'\nimport './App.css';\n\nfunction App() {\n  const [score, setScore] = useState(0)\n  const [mistakesAllowed, setMistakesAllowed] = useState(0)\n  const [currentProblem, setCurrentProblem] = useState(generateGame)\n  const [userAnswer, setUserAnswer] = useState(\"\")\n  const [showError, setShowError] = useState(false)\n  const answerField = useRef(null) /* for focusing on an element, React let us remember the field using ref */\n  const resetButton = useRef(null)\n\n  // useEffect\n  // first argument is a function we want to run, second argument is the condition for running the function\n  // -> second is a list of state attributes when updated will trigger the first function to run\n  useEffect(() => {\n    if (score === 10 || mistakesAllowed === 3) {\n      // want for 331 ms for overlay to run into view\n      setTimeout(() => resetButton.current.focus(), 331)\n    }\n  }, [score, mistakesAllowed])\n\n  function generateNumber(max) {\n    return Math.floor(Math.random() * (max + 1))\n  }\n\n  function generateGame() {\n    return {\n      firstNumber: generateNumber(10),\n      secondNumber: generateNumber(10),\n      operator: ['+', '-', 'x'][generateNumber(2)]\n    }\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault()\n\n    answerField.current.focus()\n\n    let correctAnswer\n    if (currentProblem.operator === \"+\") correctAnswer = currentProblem.firstNumber + currentProblem.secondNumber\n    if (currentProblem.operator === \"-\") correctAnswer = currentProblem.firstNumber - currentProblem.secondNumber\n    if (currentProblem.operator === \"x\") correctAnswer = currentProblem.firstNumber * currentProblem.secondNumber\n\n    if (parseInt(userAnswer) === correctAnswer) {\n      setScore(prev => prev + 1) // to make state pure, use prev value\n    } else {\n      setMistakesAllowed(prev => prev + 1)\n      setShowError(true)\n      setTimeout(() => setShowError(false), 401)\n    }\n    setCurrentProblem(generateGame())\n    setUserAnswer(\"\")\n  }\n\n  function resetGame() {\n    setScore(0)\n    setMistakesAllowed(0)\n    setUserAnswer(\"\")\n    setCurrentProblem(generateGame())\n    answerField.current.focus()\n  }\n\n  return (\n    <>\n      <div className={\"main-ui\" + ((mistakesAllowed === 3 || score === 10) ? \" blurred\" : \"\")}>\n        <p className={\"game\" + (showError ? \" animate-wrong\" : \"\")}>{currentProblem.firstNumber} {currentProblem.operator} {currentProblem.secondNumber}</p>\n\n        {/*  single source of truth is our data, not the DOM, we won't go through the DOM search path,\n             instead tie the html element with the state. When a related state attribute is updated.\n             React automatically updates the corresponding html element. see <input value={} .../>\n         */}\n        <form onSubmit={handleSubmit} action=\"\" className=\"game-form\">\n          {\n            /* React does not have a way to do element.focus(), the way in React is to use ref=\n             */\n          }\n          <input ref={answerField} value={userAnswer} onChange={e => setUserAnswer(e.target.value)} type=\"text\" className=\"form-field\" autoComplete=\"off\" />\n          <button>Submit</button>\n        </form>\n\n        <p className=\"stat\">You needs {10 - score} more points, and are not allowed to make {(2 - mistakesAllowed) > 0 ? 2 - mistakesAllowed : 0} more mistakes.\n        </p>\n\n        <ProgressBar score={score} />\n      </div>\n\n      <div className={\"overlay\" + (mistakesAllowed === 3 || score === 10 ? \" overlay--visible\" : \"\")}>\n        <div className=\"overlay-inner\">\n          <p className=\"end-message\">{score === 10 ? \"Congrats! You won.\" : \"Sorry! You lost.\"}</p>\n          <button ref={resetButton} onClick={resetGame} className=\"reset-button\">Start Over</button>\n        </div>\n      </div>\n    </>\n  );\n}\n\nfunction ProgressBar(props) {\n  return (\n    <div className=\"progress\">\n      <div className=\"boxes\">\n        <div className=\"box\"></div>\n        <div className=\"box\"></div>\n        <div className=\"box\"></div>\n        <div className=\"box\"></div>\n        <div className=\"box\"></div>\n        <div className=\"box\"></div>\n        <div className=\"box\"></div>\n        <div className=\"box\"></div>\n        <div className=\"box\"></div>\n        <div className=\"box\"></div>\n      </div>\n      {/* add style with CSS object*/}\n      <div className=\"progress-inner\" style={{ transform: `scaleX(${props.score / 10})` }}></div>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('app')\n);\n"],"sourceRoot":""}